openapi: 3.0.0
info:
  title: Tasks API
  version: 1.0.0
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    patch:
      summary: Update task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Task updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    delete:
      summary: Delete task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted
        '404':
          description: Task not found

  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Update user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  /users/{id}/tasks:
    get:
      summary: Get all tasks for individual user
      tags:
        - users
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of user`s tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          description: User not found

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          x-go-name: ID
        name:
          type: string
        is_done:
          type: boolean
          x-go-name: IsDone
        user_id:
          type: string
          x-go-name: UserID
      required:
        - id
        - name
        - is_done
        - user_id

    TaskRequest:
      type: object
      properties:
        name:
          type: string
        is_done:
          type: boolean
          default: false
          x-go-name: IsDone
        user_id:
          type: string
          x-go-name: UserID
      required:
        - name
        - user_id

    TaskUpdate:
      type: object
      properties:
        name:
          type: string
        is_done:
          type: boolean
          x-go-name: IsDone
        user_id:
          type: string
          x-go-name: UserID

    UserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    User:
      type: object
      properties:
        id:
          type: string
          x-go-name: ID
        email:
          type: string
        password:
          type: string
      required:
        - id
        - email
        - password

    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    UserWithTasks:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - id
        - email
        - password